// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: report.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_report_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_report_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_report_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_report_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_report_2eproto;
namespace telemetry {
namespace report {
class FlowKey;
struct FlowKeyDefaultTypeInternal;
extern FlowKeyDefaultTypeInternal _FlowKey_default_instance_;
class Hop;
struct HopDefaultTypeInternal;
extern HopDefaultTypeInternal _Hop_default_instance_;
class Hop_MetadataEntry_DoNotUse;
struct Hop_MetadataEntry_DoNotUseDefaultTypeInternal;
extern Hop_MetadataEntry_DoNotUseDefaultTypeInternal _Hop_MetadataEntry_DoNotUse_default_instance_;
class IPv6Address;
struct IPv6AddressDefaultTypeInternal;
extern IPv6AddressDefaultTypeInternal _IPv6Address_default_instance_;
class Report;
struct ReportDefaultTypeInternal;
extern ReportDefaultTypeInternal _Report_default_instance_;
}  // namespace report
}  // namespace telemetry
PROTOBUF_NAMESPACE_OPEN
template<> ::telemetry::report::FlowKey* Arena::CreateMaybeMessage<::telemetry::report::FlowKey>(Arena*);
template<> ::telemetry::report::Hop* Arena::CreateMaybeMessage<::telemetry::report::Hop>(Arena*);
template<> ::telemetry::report::Hop_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::telemetry::report::Hop_MetadataEntry_DoNotUse>(Arena*);
template<> ::telemetry::report::IPv6Address* Arena::CreateMaybeMessage<::telemetry::report::IPv6Address>(Arena*);
template<> ::telemetry::report::Report* Arena::CreateMaybeMessage<::telemetry::report::Report>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace telemetry {
namespace report {

enum Report_PacketType : int {
  Report_PacketType_None = 0,
  Report_PacketType_Ethernet = 1,
  Report_PacketType_IPv4 = 2,
  Report_PacketType_IPv6 = 3,
  Report_PacketType_SCION = 4,
  Report_PacketType_Report_PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Report_PacketType_Report_PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Report_PacketType_IsValid(int value);
constexpr Report_PacketType Report_PacketType_PacketType_MIN = Report_PacketType_None;
constexpr Report_PacketType Report_PacketType_PacketType_MAX = Report_PacketType_SCION;
constexpr int Report_PacketType_PacketType_ARRAYSIZE = Report_PacketType_PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Report_PacketType_descriptor();
template<typename T>
inline const std::string& Report_PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Report_PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Report_PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Report_PacketType_descriptor(), enum_t_value);
}
inline bool Report_PacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Report_PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Report_PacketType>(
    Report_PacketType_descriptor(), name, value);
}
enum FlowKey_Protocol : int {
  FlowKey_Protocol_None = 0,
  FlowKey_Protocol_UDP = 1,
  FlowKey_Protocol_TCP = 2,
  FlowKey_Protocol_FlowKey_Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FlowKey_Protocol_FlowKey_Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FlowKey_Protocol_IsValid(int value);
constexpr FlowKey_Protocol FlowKey_Protocol_Protocol_MIN = FlowKey_Protocol_None;
constexpr FlowKey_Protocol FlowKey_Protocol_Protocol_MAX = FlowKey_Protocol_TCP;
constexpr int FlowKey_Protocol_Protocol_ARRAYSIZE = FlowKey_Protocol_Protocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowKey_Protocol_descriptor();
template<typename T>
inline const std::string& FlowKey_Protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FlowKey_Protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FlowKey_Protocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FlowKey_Protocol_descriptor(), enum_t_value);
}
inline bool FlowKey_Protocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FlowKey_Protocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FlowKey_Protocol>(
    FlowKey_Protocol_descriptor(), name, value);
}
enum MetadataType : int {
  RESERVED = 0,
  INTERFACE_LEVEL1 = 1,
  HOP_LATENCY = 2,
  QUEUE_OCCUPANCY = 3,
  INGRESS_TIMESTAMP = 4,
  EGRESS_TIMESTAMP = 5,
  INTERFACE_LEVEL2 = 6,
  EGRESS_TX_UTILIZATION = 7,
  BUFFER_OCCUPANCY = 8,
  QUEUE_DROP_REASON = 15,
  INGRESS_RX_PKT_COUNT = 16,
  INGRESS_RX_BYTES = 17,
  INGRESS_RX_DROP_COUNT = 18,
  EGRESS_TX_PKT_COUNT = 19,
  EGRESS_TX_BYTES = 20,
  EGRESS_TX_DROP_COUNT = 21,
  INGRESS_RX_UTILIZATION = 22,
  MetadataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MetadataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MetadataType_IsValid(int value);
constexpr MetadataType MetadataType_MIN = RESERVED;
constexpr MetadataType MetadataType_MAX = INGRESS_RX_UTILIZATION;
constexpr int MetadataType_ARRAYSIZE = MetadataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetadataType_descriptor();
template<typename T>
inline const std::string& MetadataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetadataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetadataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MetadataType_descriptor(), enum_t_value);
}
inline bool MetadataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MetadataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MetadataType>(
    MetadataType_descriptor(), name, value);
}
// ===================================================================

class Report final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:telemetry.report.Report) */ {
 public:
  inline Report() : Report(nullptr) {}
  ~Report() override;
  explicit constexpr Report(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Report(const Report& from);
  Report(Report&& from) noexcept
    : Report() {
    *this = ::std::move(from);
  }

  inline Report& operator=(const Report& from) {
    CopyFrom(from);
    return *this;
  }
  inline Report& operator=(Report&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Report& default_instance() {
    return *internal_default_instance();
  }
  static inline const Report* internal_default_instance() {
    return reinterpret_cast<const Report*>(
               &_Report_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Report& a, Report& b) {
    a.Swap(&b);
  }
  inline void Swap(Report* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Report* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Report* New() const final {
    return new Report();
  }

  Report* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Report>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Report& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Report& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Report* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "telemetry.report.Report";
  }
  protected:
  explicit Report(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Report_PacketType PacketType;
  static constexpr PacketType None =
    Report_PacketType_None;
  static constexpr PacketType Ethernet =
    Report_PacketType_Ethernet;
  static constexpr PacketType IPv4 =
    Report_PacketType_IPv4;
  static constexpr PacketType IPv6 =
    Report_PacketType_IPv6;
  static constexpr PacketType SCION =
    Report_PacketType_SCION;
  static inline bool PacketType_IsValid(int value) {
    return Report_PacketType_IsValid(value);
  }
  static constexpr PacketType PacketType_MIN =
    Report_PacketType_PacketType_MIN;
  static constexpr PacketType PacketType_MAX =
    Report_PacketType_PacketType_MAX;
  static constexpr int PacketType_ARRAYSIZE =
    Report_PacketType_PacketType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PacketType_descriptor() {
    return Report_PacketType_descriptor();
  }
  template<typename T>
  static inline const std::string& PacketType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PacketType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PacketType_Name.");
    return Report_PacketType_Name(enum_t_value);
  }
  static inline bool PacketType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PacketType* value) {
    return Report_PacketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHopsFieldNumber = 1,
    kTruncatedPacketFieldNumber = 3,
    kPacketTypeFieldNumber = 2,
  };
  // repeated .telemetry.report.Hop hops = 1;
  int hops_size() const;
  private:
  int _internal_hops_size() const;
  public:
  void clear_hops();
  ::telemetry::report::Hop* mutable_hops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::telemetry::report::Hop >*
      mutable_hops();
  private:
  const ::telemetry::report::Hop& _internal_hops(int index) const;
  ::telemetry::report::Hop* _internal_add_hops();
  public:
  const ::telemetry::report::Hop& hops(int index) const;
  ::telemetry::report::Hop* add_hops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::telemetry::report::Hop >&
      hops() const;

  // bytes truncated_packet = 3;
  void clear_truncated_packet();
  const std::string& truncated_packet() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_truncated_packet(ArgT0&& arg0, ArgT... args);
  std::string* mutable_truncated_packet();
  PROTOBUF_MUST_USE_RESULT std::string* release_truncated_packet();
  void set_allocated_truncated_packet(std::string* truncated_packet);
  private:
  const std::string& _internal_truncated_packet() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_truncated_packet(const std::string& value);
  std::string* _internal_mutable_truncated_packet();
  public:

  // .telemetry.report.Report.PacketType packet_type = 2;
  void clear_packet_type();
  ::telemetry::report::Report_PacketType packet_type() const;
  void set_packet_type(::telemetry::report::Report_PacketType value);
  private:
  ::telemetry::report::Report_PacketType _internal_packet_type() const;
  void _internal_set_packet_type(::telemetry::report::Report_PacketType value);
  public:

  // @@protoc_insertion_point(class_scope:telemetry.report.Report)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::telemetry::report::Hop > hops_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr truncated_packet_;
  int packet_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_report_2eproto;
};
// -------------------------------------------------------------------

class Hop_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Hop_MetadataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Hop_MetadataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  Hop_MetadataEntry_DoNotUse();
  explicit constexpr Hop_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Hop_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Hop_MetadataEntry_DoNotUse& other);
  static const Hop_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Hop_MetadataEntry_DoNotUse*>(&_Hop_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Hop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:telemetry.report.Hop) */ {
 public:
  inline Hop() : Hop(nullptr) {}
  ~Hop() override;
  explicit constexpr Hop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Hop(const Hop& from);
  Hop(Hop&& from) noexcept
    : Hop() {
    *this = ::std::move(from);
  }

  inline Hop& operator=(const Hop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hop& operator=(Hop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hop* internal_default_instance() {
    return reinterpret_cast<const Hop*>(
               &_Hop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Hop& a, Hop& b) {
    a.Swap(&b);
  }
  inline void Swap(Hop* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hop* New() const final {
    return new Hop();
  }

  Hop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Hop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Hop& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "telemetry.report.Hop";
  }
  protected:
  explicit Hop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kAsnFieldNumber = 1,
    kNodeIdFieldNumber = 2,
  };
  // map<uint32, bytes> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      mutable_metadata();

  // uint64 asn = 1;
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint64 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 node_id = 2;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:telemetry.report.Hop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Hop_MetadataEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 asn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_report_2eproto;
};
// -------------------------------------------------------------------

class FlowKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:telemetry.report.FlowKey) */ {
 public:
  inline FlowKey() : FlowKey(nullptr) {}
  ~FlowKey() override;
  explicit constexpr FlowKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlowKey(const FlowKey& from);
  FlowKey(FlowKey&& from) noexcept
    : FlowKey() {
    *this = ::std::move(from);
  }

  inline FlowKey& operator=(const FlowKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowKey& operator=(FlowKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlowKey& default_instance() {
    return *internal_default_instance();
  }
  enum DstIpCase {
    kDstIpv4 = 4,
    kDstIpv6 = 5,
    DST_IP_NOT_SET = 0,
  };

  enum SrcIpCase {
    kSrcIpv4 = 6,
    kSrcIpv6 = 7,
    SRC_IP_NOT_SET = 0,
  };

  static inline const FlowKey* internal_default_instance() {
    return reinterpret_cast<const FlowKey*>(
               &_FlowKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FlowKey& a, FlowKey& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowKey* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowKey* New() const final {
    return new FlowKey();
  }

  FlowKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlowKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FlowKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "telemetry.report.FlowKey";
  }
  protected:
  explicit FlowKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FlowKey_Protocol Protocol;
  static constexpr Protocol None =
    FlowKey_Protocol_None;
  static constexpr Protocol UDP =
    FlowKey_Protocol_UDP;
  static constexpr Protocol TCP =
    FlowKey_Protocol_TCP;
  static inline bool Protocol_IsValid(int value) {
    return FlowKey_Protocol_IsValid(value);
  }
  static constexpr Protocol Protocol_MIN =
    FlowKey_Protocol_Protocol_MIN;
  static constexpr Protocol Protocol_MAX =
    FlowKey_Protocol_Protocol_MAX;
  static constexpr int Protocol_ARRAYSIZE =
    FlowKey_Protocol_Protocol_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Protocol_descriptor() {
    return FlowKey_Protocol_descriptor();
  }
  template<typename T>
  static inline const std::string& Protocol_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Protocol>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Protocol_Name.");
    return FlowKey_Protocol_Name(enum_t_value);
  }
  static inline bool Protocol_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Protocol* value) {
    return FlowKey_Protocol_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDstAsFieldNumber = 1,
    kSrcAsFieldNumber = 2,
    kFlowIdFieldNumber = 3,
    kDstPortFieldNumber = 8,
    kSrcPortFieldNumber = 9,
    kProtocolFieldNumber = 10,
    kDstIpv4FieldNumber = 4,
    kDstIpv6FieldNumber = 5,
    kSrcIpv4FieldNumber = 6,
    kSrcIpv6FieldNumber = 7,
  };
  // uint64 dst_as = 1;
  void clear_dst_as();
  ::PROTOBUF_NAMESPACE_ID::uint64 dst_as() const;
  void set_dst_as(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dst_as() const;
  void _internal_set_dst_as(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 src_as = 2;
  void clear_src_as();
  ::PROTOBUF_NAMESPACE_ID::uint64 src_as() const;
  void set_src_as(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_src_as() const;
  void _internal_set_src_as(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 flow_id = 3;
  void clear_flow_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 flow_id() const;
  void set_flow_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flow_id() const;
  void _internal_set_flow_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dst_port = 8;
  void clear_dst_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_port() const;
  void set_dst_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dst_port() const;
  void _internal_set_dst_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 src_port = 9;
  void clear_src_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_port() const;
  void set_src_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_port() const;
  void _internal_set_src_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .telemetry.report.FlowKey.Protocol protocol = 10;
  void clear_protocol();
  ::telemetry::report::FlowKey_Protocol protocol() const;
  void set_protocol(::telemetry::report::FlowKey_Protocol value);
  private:
  ::telemetry::report::FlowKey_Protocol _internal_protocol() const;
  void _internal_set_protocol(::telemetry::report::FlowKey_Protocol value);
  public:

  // fixed32 dst_ipv4 = 4;
  bool has_dst_ipv4() const;
  private:
  bool _internal_has_dst_ipv4() const;
  public:
  void clear_dst_ipv4();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_ipv4() const;
  void set_dst_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dst_ipv4() const;
  void _internal_set_dst_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .telemetry.report.IPv6Address dst_ipv6 = 5;
  bool has_dst_ipv6() const;
  private:
  bool _internal_has_dst_ipv6() const;
  public:
  void clear_dst_ipv6();
  const ::telemetry::report::IPv6Address& dst_ipv6() const;
  PROTOBUF_MUST_USE_RESULT ::telemetry::report::IPv6Address* release_dst_ipv6();
  ::telemetry::report::IPv6Address* mutable_dst_ipv6();
  void set_allocated_dst_ipv6(::telemetry::report::IPv6Address* dst_ipv6);
  private:
  const ::telemetry::report::IPv6Address& _internal_dst_ipv6() const;
  ::telemetry::report::IPv6Address* _internal_mutable_dst_ipv6();
  public:
  void unsafe_arena_set_allocated_dst_ipv6(
      ::telemetry::report::IPv6Address* dst_ipv6);
  ::telemetry::report::IPv6Address* unsafe_arena_release_dst_ipv6();

  // fixed32 src_ipv4 = 6;
  bool has_src_ipv4() const;
  private:
  bool _internal_has_src_ipv4() const;
  public:
  void clear_src_ipv4();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_ipv4() const;
  void set_src_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_ipv4() const;
  void _internal_set_src_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .telemetry.report.IPv6Address src_ipv6 = 7;
  bool has_src_ipv6() const;
  private:
  bool _internal_has_src_ipv6() const;
  public:
  void clear_src_ipv6();
  const ::telemetry::report::IPv6Address& src_ipv6() const;
  PROTOBUF_MUST_USE_RESULT ::telemetry::report::IPv6Address* release_src_ipv6();
  ::telemetry::report::IPv6Address* mutable_src_ipv6();
  void set_allocated_src_ipv6(::telemetry::report::IPv6Address* src_ipv6);
  private:
  const ::telemetry::report::IPv6Address& _internal_src_ipv6() const;
  ::telemetry::report::IPv6Address* _internal_mutable_src_ipv6();
  public:
  void unsafe_arena_set_allocated_src_ipv6(
      ::telemetry::report::IPv6Address* src_ipv6);
  ::telemetry::report::IPv6Address* unsafe_arena_release_src_ipv6();

  void clear_dst_ip();
  DstIpCase dst_ip_case() const;
  void clear_src_ip();
  SrcIpCase src_ip_case() const;
  // @@protoc_insertion_point(class_scope:telemetry.report.FlowKey)
 private:
  class _Internal;
  void set_has_dst_ipv4();
  void set_has_dst_ipv6();
  void set_has_src_ipv4();
  void set_has_src_ipv6();

  inline bool has_dst_ip() const;
  inline void clear_has_dst_ip();

  inline bool has_src_ip() const;
  inline void clear_has_src_ip();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dst_as_;
  ::PROTOBUF_NAMESPACE_ID::uint64 src_as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flow_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_port_;
  int protocol_;
  union DstIpUnion {
    constexpr DstIpUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 dst_ipv4_;
    ::telemetry::report::IPv6Address* dst_ipv6_;
  } dst_ip_;
  union SrcIpUnion {
    constexpr SrcIpUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 src_ipv4_;
    ::telemetry::report::IPv6Address* src_ipv6_;
  } src_ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_report_2eproto;
};
// -------------------------------------------------------------------

class IPv6Address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:telemetry.report.IPv6Address) */ {
 public:
  inline IPv6Address() : IPv6Address(nullptr) {}
  ~IPv6Address() override;
  explicit constexpr IPv6Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPv6Address(const IPv6Address& from);
  IPv6Address(IPv6Address&& from) noexcept
    : IPv6Address() {
    *this = ::std::move(from);
  }

  inline IPv6Address& operator=(const IPv6Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPv6Address& operator=(IPv6Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPv6Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPv6Address* internal_default_instance() {
    return reinterpret_cast<const IPv6Address*>(
               &_IPv6Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IPv6Address& a, IPv6Address& b) {
    a.Swap(&b);
  }
  inline void Swap(IPv6Address* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPv6Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPv6Address* New() const final {
    return new IPv6Address();
  }

  IPv6Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPv6Address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPv6Address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPv6Address& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPv6Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "telemetry.report.IPv6Address";
  }
  protected:
  explicit IPv6Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighFieldNumber = 1,
    kLowFieldNumber = 2,
  };
  // fixed64 high = 1;
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_high() const;
  void _internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 low = 2;
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_low() const;
  void _internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:telemetry.report.IPv6Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 high_;
  ::PROTOBUF_NAMESPACE_ID::uint64 low_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_report_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Report

// repeated .telemetry.report.Hop hops = 1;
inline int Report::_internal_hops_size() const {
  return hops_.size();
}
inline int Report::hops_size() const {
  return _internal_hops_size();
}
inline void Report::clear_hops() {
  hops_.Clear();
}
inline ::telemetry::report::Hop* Report::mutable_hops(int index) {
  // @@protoc_insertion_point(field_mutable:telemetry.report.Report.hops)
  return hops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::telemetry::report::Hop >*
Report::mutable_hops() {
  // @@protoc_insertion_point(field_mutable_list:telemetry.report.Report.hops)
  return &hops_;
}
inline const ::telemetry::report::Hop& Report::_internal_hops(int index) const {
  return hops_.Get(index);
}
inline const ::telemetry::report::Hop& Report::hops(int index) const {
  // @@protoc_insertion_point(field_get:telemetry.report.Report.hops)
  return _internal_hops(index);
}
inline ::telemetry::report::Hop* Report::_internal_add_hops() {
  return hops_.Add();
}
inline ::telemetry::report::Hop* Report::add_hops() {
  ::telemetry::report::Hop* _add = _internal_add_hops();
  // @@protoc_insertion_point(field_add:telemetry.report.Report.hops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::telemetry::report::Hop >&
Report::hops() const {
  // @@protoc_insertion_point(field_list:telemetry.report.Report.hops)
  return hops_;
}

// .telemetry.report.Report.PacketType packet_type = 2;
inline void Report::clear_packet_type() {
  packet_type_ = 0;
}
inline ::telemetry::report::Report_PacketType Report::_internal_packet_type() const {
  return static_cast< ::telemetry::report::Report_PacketType >(packet_type_);
}
inline ::telemetry::report::Report_PacketType Report::packet_type() const {
  // @@protoc_insertion_point(field_get:telemetry.report.Report.packet_type)
  return _internal_packet_type();
}
inline void Report::_internal_set_packet_type(::telemetry::report::Report_PacketType value) {
  
  packet_type_ = value;
}
inline void Report::set_packet_type(::telemetry::report::Report_PacketType value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:telemetry.report.Report.packet_type)
}

// bytes truncated_packet = 3;
inline void Report::clear_truncated_packet() {
  truncated_packet_.ClearToEmpty();
}
inline const std::string& Report::truncated_packet() const {
  // @@protoc_insertion_point(field_get:telemetry.report.Report.truncated_packet)
  return _internal_truncated_packet();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Report::set_truncated_packet(ArgT0&& arg0, ArgT... args) {
 
 truncated_packet_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:telemetry.report.Report.truncated_packet)
}
inline std::string* Report::mutable_truncated_packet() {
  std::string* _s = _internal_mutable_truncated_packet();
  // @@protoc_insertion_point(field_mutable:telemetry.report.Report.truncated_packet)
  return _s;
}
inline const std::string& Report::_internal_truncated_packet() const {
  return truncated_packet_.Get();
}
inline void Report::_internal_set_truncated_packet(const std::string& value) {
  
  truncated_packet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Report::_internal_mutable_truncated_packet() {
  
  return truncated_packet_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Report::release_truncated_packet() {
  // @@protoc_insertion_point(field_release:telemetry.report.Report.truncated_packet)
  return truncated_packet_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Report::set_allocated_truncated_packet(std::string* truncated_packet) {
  if (truncated_packet != nullptr) {
    
  } else {
    
  }
  truncated_packet_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), truncated_packet,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:telemetry.report.Report.truncated_packet)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Hop

// uint64 asn = 1;
inline void Hop::clear_asn() {
  asn_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Hop::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Hop::asn() const {
  // @@protoc_insertion_point(field_get:telemetry.report.Hop.asn)
  return _internal_asn();
}
inline void Hop::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  asn_ = value;
}
inline void Hop::set_asn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:telemetry.report.Hop.asn)
}

// uint32 node_id = 2;
inline void Hop::clear_node_id() {
  node_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Hop::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Hop::node_id() const {
  // @@protoc_insertion_point(field_get:telemetry.report.Hop.node_id)
  return _internal_node_id();
}
inline void Hop::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node_id_ = value;
}
inline void Hop::set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:telemetry.report.Hop.node_id)
}

// map<uint32, bytes> metadata = 3;
inline int Hop::_internal_metadata_size() const {
  return metadata_.size();
}
inline int Hop::metadata_size() const {
  return _internal_metadata_size();
}
inline void Hop::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
Hop::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
Hop::metadata() const {
  // @@protoc_insertion_point(field_map:telemetry.report.Hop.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
Hop::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
Hop::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:telemetry.report.Hop.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// FlowKey

// uint64 dst_as = 1;
inline void FlowKey::clear_dst_as() {
  dst_as_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowKey::_internal_dst_as() const {
  return dst_as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowKey::dst_as() const {
  // @@protoc_insertion_point(field_get:telemetry.report.FlowKey.dst_as)
  return _internal_dst_as();
}
inline void FlowKey::_internal_set_dst_as(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dst_as_ = value;
}
inline void FlowKey::set_dst_as(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dst_as(value);
  // @@protoc_insertion_point(field_set:telemetry.report.FlowKey.dst_as)
}

// uint64 src_as = 2;
inline void FlowKey::clear_src_as() {
  src_as_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowKey::_internal_src_as() const {
  return src_as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowKey::src_as() const {
  // @@protoc_insertion_point(field_get:telemetry.report.FlowKey.src_as)
  return _internal_src_as();
}
inline void FlowKey::_internal_set_src_as(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  src_as_ = value;
}
inline void FlowKey::set_src_as(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_src_as(value);
  // @@protoc_insertion_point(field_set:telemetry.report.FlowKey.src_as)
}

// uint32 flow_id = 3;
inline void FlowKey::clear_flow_id() {
  flow_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowKey::_internal_flow_id() const {
  return flow_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowKey::flow_id() const {
  // @@protoc_insertion_point(field_get:telemetry.report.FlowKey.flow_id)
  return _internal_flow_id();
}
inline void FlowKey::_internal_set_flow_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flow_id_ = value;
}
inline void FlowKey::set_flow_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flow_id(value);
  // @@protoc_insertion_point(field_set:telemetry.report.FlowKey.flow_id)
}

// fixed32 dst_ipv4 = 4;
inline bool FlowKey::_internal_has_dst_ipv4() const {
  return dst_ip_case() == kDstIpv4;
}
inline bool FlowKey::has_dst_ipv4() const {
  return _internal_has_dst_ipv4();
}
inline void FlowKey::set_has_dst_ipv4() {
  _oneof_case_[0] = kDstIpv4;
}
inline void FlowKey::clear_dst_ipv4() {
  if (_internal_has_dst_ipv4()) {
    dst_ip_.dst_ipv4_ = 0u;
    clear_has_dst_ip();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowKey::_internal_dst_ipv4() const {
  if (_internal_has_dst_ipv4()) {
    return dst_ip_.dst_ipv4_;
  }
  return 0u;
}
inline void FlowKey::_internal_set_dst_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_dst_ipv4()) {
    clear_dst_ip();
    set_has_dst_ipv4();
  }
  dst_ip_.dst_ipv4_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowKey::dst_ipv4() const {
  // @@protoc_insertion_point(field_get:telemetry.report.FlowKey.dst_ipv4)
  return _internal_dst_ipv4();
}
inline void FlowKey::set_dst_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dst_ipv4(value);
  // @@protoc_insertion_point(field_set:telemetry.report.FlowKey.dst_ipv4)
}

// .telemetry.report.IPv6Address dst_ipv6 = 5;
inline bool FlowKey::_internal_has_dst_ipv6() const {
  return dst_ip_case() == kDstIpv6;
}
inline bool FlowKey::has_dst_ipv6() const {
  return _internal_has_dst_ipv6();
}
inline void FlowKey::set_has_dst_ipv6() {
  _oneof_case_[0] = kDstIpv6;
}
inline void FlowKey::clear_dst_ipv6() {
  if (_internal_has_dst_ipv6()) {
    if (GetArenaForAllocation() == nullptr) {
      delete dst_ip_.dst_ipv6_;
    }
    clear_has_dst_ip();
  }
}
inline ::telemetry::report::IPv6Address* FlowKey::release_dst_ipv6() {
  // @@protoc_insertion_point(field_release:telemetry.report.FlowKey.dst_ipv6)
  if (_internal_has_dst_ipv6()) {
    clear_has_dst_ip();
      ::telemetry::report::IPv6Address* temp = dst_ip_.dst_ipv6_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dst_ip_.dst_ipv6_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::telemetry::report::IPv6Address& FlowKey::_internal_dst_ipv6() const {
  return _internal_has_dst_ipv6()
      ? *dst_ip_.dst_ipv6_
      : reinterpret_cast< ::telemetry::report::IPv6Address&>(::telemetry::report::_IPv6Address_default_instance_);
}
inline const ::telemetry::report::IPv6Address& FlowKey::dst_ipv6() const {
  // @@protoc_insertion_point(field_get:telemetry.report.FlowKey.dst_ipv6)
  return _internal_dst_ipv6();
}
inline ::telemetry::report::IPv6Address* FlowKey::unsafe_arena_release_dst_ipv6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:telemetry.report.FlowKey.dst_ipv6)
  if (_internal_has_dst_ipv6()) {
    clear_has_dst_ip();
    ::telemetry::report::IPv6Address* temp = dst_ip_.dst_ipv6_;
    dst_ip_.dst_ipv6_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FlowKey::unsafe_arena_set_allocated_dst_ipv6(::telemetry::report::IPv6Address* dst_ipv6) {
  clear_dst_ip();
  if (dst_ipv6) {
    set_has_dst_ipv6();
    dst_ip_.dst_ipv6_ = dst_ipv6;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:telemetry.report.FlowKey.dst_ipv6)
}
inline ::telemetry::report::IPv6Address* FlowKey::_internal_mutable_dst_ipv6() {
  if (!_internal_has_dst_ipv6()) {
    clear_dst_ip();
    set_has_dst_ipv6();
    dst_ip_.dst_ipv6_ = CreateMaybeMessage< ::telemetry::report::IPv6Address >(GetArenaForAllocation());
  }
  return dst_ip_.dst_ipv6_;
}
inline ::telemetry::report::IPv6Address* FlowKey::mutable_dst_ipv6() {
  ::telemetry::report::IPv6Address* _msg = _internal_mutable_dst_ipv6();
  // @@protoc_insertion_point(field_mutable:telemetry.report.FlowKey.dst_ipv6)
  return _msg;
}

// fixed32 src_ipv4 = 6;
inline bool FlowKey::_internal_has_src_ipv4() const {
  return src_ip_case() == kSrcIpv4;
}
inline bool FlowKey::has_src_ipv4() const {
  return _internal_has_src_ipv4();
}
inline void FlowKey::set_has_src_ipv4() {
  _oneof_case_[1] = kSrcIpv4;
}
inline void FlowKey::clear_src_ipv4() {
  if (_internal_has_src_ipv4()) {
    src_ip_.src_ipv4_ = 0u;
    clear_has_src_ip();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowKey::_internal_src_ipv4() const {
  if (_internal_has_src_ipv4()) {
    return src_ip_.src_ipv4_;
  }
  return 0u;
}
inline void FlowKey::_internal_set_src_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_src_ipv4()) {
    clear_src_ip();
    set_has_src_ipv4();
  }
  src_ip_.src_ipv4_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowKey::src_ipv4() const {
  // @@protoc_insertion_point(field_get:telemetry.report.FlowKey.src_ipv4)
  return _internal_src_ipv4();
}
inline void FlowKey::set_src_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_ipv4(value);
  // @@protoc_insertion_point(field_set:telemetry.report.FlowKey.src_ipv4)
}

// .telemetry.report.IPv6Address src_ipv6 = 7;
inline bool FlowKey::_internal_has_src_ipv6() const {
  return src_ip_case() == kSrcIpv6;
}
inline bool FlowKey::has_src_ipv6() const {
  return _internal_has_src_ipv6();
}
inline void FlowKey::set_has_src_ipv6() {
  _oneof_case_[1] = kSrcIpv6;
}
inline void FlowKey::clear_src_ipv6() {
  if (_internal_has_src_ipv6()) {
    if (GetArenaForAllocation() == nullptr) {
      delete src_ip_.src_ipv6_;
    }
    clear_has_src_ip();
  }
}
inline ::telemetry::report::IPv6Address* FlowKey::release_src_ipv6() {
  // @@protoc_insertion_point(field_release:telemetry.report.FlowKey.src_ipv6)
  if (_internal_has_src_ipv6()) {
    clear_has_src_ip();
      ::telemetry::report::IPv6Address* temp = src_ip_.src_ipv6_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    src_ip_.src_ipv6_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::telemetry::report::IPv6Address& FlowKey::_internal_src_ipv6() const {
  return _internal_has_src_ipv6()
      ? *src_ip_.src_ipv6_
      : reinterpret_cast< ::telemetry::report::IPv6Address&>(::telemetry::report::_IPv6Address_default_instance_);
}
inline const ::telemetry::report::IPv6Address& FlowKey::src_ipv6() const {
  // @@protoc_insertion_point(field_get:telemetry.report.FlowKey.src_ipv6)
  return _internal_src_ipv6();
}
inline ::telemetry::report::IPv6Address* FlowKey::unsafe_arena_release_src_ipv6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:telemetry.report.FlowKey.src_ipv6)
  if (_internal_has_src_ipv6()) {
    clear_has_src_ip();
    ::telemetry::report::IPv6Address* temp = src_ip_.src_ipv6_;
    src_ip_.src_ipv6_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FlowKey::unsafe_arena_set_allocated_src_ipv6(::telemetry::report::IPv6Address* src_ipv6) {
  clear_src_ip();
  if (src_ipv6) {
    set_has_src_ipv6();
    src_ip_.src_ipv6_ = src_ipv6;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:telemetry.report.FlowKey.src_ipv6)
}
inline ::telemetry::report::IPv6Address* FlowKey::_internal_mutable_src_ipv6() {
  if (!_internal_has_src_ipv6()) {
    clear_src_ip();
    set_has_src_ipv6();
    src_ip_.src_ipv6_ = CreateMaybeMessage< ::telemetry::report::IPv6Address >(GetArenaForAllocation());
  }
  return src_ip_.src_ipv6_;
}
inline ::telemetry::report::IPv6Address* FlowKey::mutable_src_ipv6() {
  ::telemetry::report::IPv6Address* _msg = _internal_mutable_src_ipv6();
  // @@protoc_insertion_point(field_mutable:telemetry.report.FlowKey.src_ipv6)
  return _msg;
}

// uint32 dst_port = 8;
inline void FlowKey::clear_dst_port() {
  dst_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowKey::_internal_dst_port() const {
  return dst_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowKey::dst_port() const {
  // @@protoc_insertion_point(field_get:telemetry.report.FlowKey.dst_port)
  return _internal_dst_port();
}
inline void FlowKey::_internal_set_dst_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dst_port_ = value;
}
inline void FlowKey::set_dst_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dst_port(value);
  // @@protoc_insertion_point(field_set:telemetry.report.FlowKey.dst_port)
}

// uint32 src_port = 9;
inline void FlowKey::clear_src_port() {
  src_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowKey::_internal_src_port() const {
  return src_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowKey::src_port() const {
  // @@protoc_insertion_point(field_get:telemetry.report.FlowKey.src_port)
  return _internal_src_port();
}
inline void FlowKey::_internal_set_src_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  src_port_ = value;
}
inline void FlowKey::set_src_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_port(value);
  // @@protoc_insertion_point(field_set:telemetry.report.FlowKey.src_port)
}

// .telemetry.report.FlowKey.Protocol protocol = 10;
inline void FlowKey::clear_protocol() {
  protocol_ = 0;
}
inline ::telemetry::report::FlowKey_Protocol FlowKey::_internal_protocol() const {
  return static_cast< ::telemetry::report::FlowKey_Protocol >(protocol_);
}
inline ::telemetry::report::FlowKey_Protocol FlowKey::protocol() const {
  // @@protoc_insertion_point(field_get:telemetry.report.FlowKey.protocol)
  return _internal_protocol();
}
inline void FlowKey::_internal_set_protocol(::telemetry::report::FlowKey_Protocol value) {
  
  protocol_ = value;
}
inline void FlowKey::set_protocol(::telemetry::report::FlowKey_Protocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:telemetry.report.FlowKey.protocol)
}

inline bool FlowKey::has_dst_ip() const {
  return dst_ip_case() != DST_IP_NOT_SET;
}
inline void FlowKey::clear_has_dst_ip() {
  _oneof_case_[0] = DST_IP_NOT_SET;
}
inline bool FlowKey::has_src_ip() const {
  return src_ip_case() != SRC_IP_NOT_SET;
}
inline void FlowKey::clear_has_src_ip() {
  _oneof_case_[1] = SRC_IP_NOT_SET;
}
inline FlowKey::DstIpCase FlowKey::dst_ip_case() const {
  return FlowKey::DstIpCase(_oneof_case_[0]);
}
inline FlowKey::SrcIpCase FlowKey::src_ip_case() const {
  return FlowKey::SrcIpCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// IPv6Address

// fixed64 high = 1;
inline void IPv6Address::clear_high() {
  high_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IPv6Address::_internal_high() const {
  return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IPv6Address::high() const {
  // @@protoc_insertion_point(field_get:telemetry.report.IPv6Address.high)
  return _internal_high();
}
inline void IPv6Address::_internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  high_ = value;
}
inline void IPv6Address::set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:telemetry.report.IPv6Address.high)
}

// fixed64 low = 2;
inline void IPv6Address::clear_low() {
  low_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IPv6Address::_internal_low() const {
  return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IPv6Address::low() const {
  // @@protoc_insertion_point(field_get:telemetry.report.IPv6Address.low)
  return _internal_low();
}
inline void IPv6Address::_internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  low_ = value;
}
inline void IPv6Address::set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:telemetry.report.IPv6Address.low)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace report
}  // namespace telemetry

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::telemetry::report::Report_PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::telemetry::report::Report_PacketType>() {
  return ::telemetry::report::Report_PacketType_descriptor();
}
template <> struct is_proto_enum< ::telemetry::report::FlowKey_Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::telemetry::report::FlowKey_Protocol>() {
  return ::telemetry::report::FlowKey_Protocol_descriptor();
}
template <> struct is_proto_enum< ::telemetry::report::MetadataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::telemetry::report::MetadataType>() {
  return ::telemetry::report::MetadataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_report_2eproto
