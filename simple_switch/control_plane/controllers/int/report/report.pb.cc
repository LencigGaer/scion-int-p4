// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: report.proto

#include "report.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace telemetry {
namespace report {
constexpr Report::Report(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hops_()
  , truncated_packet_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , packet_type_(0)
{}
struct ReportDefaultTypeInternal {
  constexpr ReportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReportDefaultTypeInternal() {}
  union {
    Report _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReportDefaultTypeInternal _Report_default_instance_;
constexpr Hop_MetadataEntry_DoNotUse::Hop_MetadataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Hop_MetadataEntry_DoNotUseDefaultTypeInternal {
  constexpr Hop_MetadataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Hop_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Hop_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Hop_MetadataEntry_DoNotUseDefaultTypeInternal _Hop_MetadataEntry_DoNotUse_default_instance_;
constexpr Hop::Hop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , asn_(uint64_t{0u})
  , node_id_(0u){}
struct HopDefaultTypeInternal {
  constexpr HopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HopDefaultTypeInternal() {}
  union {
    Hop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HopDefaultTypeInternal _Hop_default_instance_;
constexpr FlowKey::FlowKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dst_as_(uint64_t{0u})
  , src_as_(uint64_t{0u})
  , flow_id_(0u)
  , dst_port_(0u)
  , src_port_(0u)
  , protocol_(0)

  , _oneof_case_{}{}
struct FlowKeyDefaultTypeInternal {
  constexpr FlowKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlowKeyDefaultTypeInternal() {}
  union {
    FlowKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlowKeyDefaultTypeInternal _FlowKey_default_instance_;
constexpr IPv6Address::IPv6Address(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : high_(uint64_t{0u})
  , low_(uint64_t{0u}){}
struct IPv6AddressDefaultTypeInternal {
  constexpr IPv6AddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPv6AddressDefaultTypeInternal() {}
  union {
    IPv6Address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPv6AddressDefaultTypeInternal _IPv6Address_default_instance_;
}  // namespace report
}  // namespace telemetry
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_report_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_report_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_report_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_report_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::telemetry::report::Report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::report::Report, hops_),
  PROTOBUF_FIELD_OFFSET(::telemetry::report::Report, packet_type_),
  PROTOBUF_FIELD_OFFSET(::telemetry::report::Report, truncated_packet_),
  PROTOBUF_FIELD_OFFSET(::telemetry::report::Hop_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::telemetry::report::Hop_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::report::Hop_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::telemetry::report::Hop_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::telemetry::report::Hop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::report::Hop, asn_),
  PROTOBUF_FIELD_OFFSET(::telemetry::report::Hop, node_id_),
  PROTOBUF_FIELD_OFFSET(::telemetry::report::Hop, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::telemetry::report::FlowKey, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::telemetry::report::FlowKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::report::FlowKey, dst_as_),
  PROTOBUF_FIELD_OFFSET(::telemetry::report::FlowKey, src_as_),
  PROTOBUF_FIELD_OFFSET(::telemetry::report::FlowKey, flow_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::telemetry::report::FlowKey, dst_port_),
  PROTOBUF_FIELD_OFFSET(::telemetry::report::FlowKey, src_port_),
  PROTOBUF_FIELD_OFFSET(::telemetry::report::FlowKey, protocol_),
  PROTOBUF_FIELD_OFFSET(::telemetry::report::FlowKey, dst_ip_),
  PROTOBUF_FIELD_OFFSET(::telemetry::report::FlowKey, src_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::telemetry::report::IPv6Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::report::IPv6Address, high_),
  PROTOBUF_FIELD_OFFSET(::telemetry::report::IPv6Address, low_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::telemetry::report::Report)},
  { 9, 17, -1, sizeof(::telemetry::report::Hop_MetadataEntry_DoNotUse)},
  { 19, -1, -1, sizeof(::telemetry::report::Hop)},
  { 28, -1, -1, sizeof(::telemetry::report::FlowKey)},
  { 46, -1, -1, sizeof(::telemetry::report::IPv6Address)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::report::_Report_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::report::_Hop_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::report::_Hop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::report::_FlowKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::report::_IPv6Address_default_instance_),
};

const char descriptor_table_protodef_report_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014report.proto\022\020telemetry.report\"\306\001\n\006Rep"
  "ort\022#\n\004hops\030\001 \003(\0132\025.telemetry.report.Hop"
  "\0228\n\013packet_type\030\002 \001(\0162#.telemetry.report"
  ".Report.PacketType\022\030\n\020truncated_packet\030\003"
  " \001(\014\"C\n\nPacketType\022\010\n\004None\020\000\022\014\n\010Ethernet"
  "\020\001\022\010\n\004IPv4\020\002\022\010\n\004IPv6\020\003\022\t\n\005SCION\020\004\"\213\001\n\003Ho"
  "p\022\013\n\003asn\030\001 \001(\004\022\017\n\007node_id\030\002 \001(\r\0225\n\010metad"
  "ata\030\003 \003(\0132#.telemetry.report.Hop.Metadat"
  "aEntry\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005"
  "value\030\002 \001(\014:\0028\001\"\336\002\n\007FlowKey\022\016\n\006dst_as\030\001 "
  "\001(\004\022\016\n\006src_as\030\002 \001(\004\022\017\n\007flow_id\030\003 \001(\r\022\022\n\010"
  "dst_ipv4\030\004 \001(\007H\000\0221\n\010dst_ipv6\030\005 \001(\0132\035.tel"
  "emetry.report.IPv6AddressH\000\022\022\n\010src_ipv4\030"
  "\006 \001(\007H\001\0221\n\010src_ipv6\030\007 \001(\0132\035.telemetry.re"
  "port.IPv6AddressH\001\022\020\n\010dst_port\030\010 \001(\r\022\020\n\010"
  "src_port\030\t \001(\r\0224\n\010protocol\030\n \001(\0162\".telem"
  "etry.report.FlowKey.Protocol\"&\n\010Protocol"
  "\022\010\n\004None\020\000\022\007\n\003UDP\020\001\022\007\n\003TCP\020\002B\010\n\006dst_ipB\010"
  "\n\006src_ip\"(\n\013IPv6Address\022\014\n\004high\030\001 \001(\006\022\013\n"
  "\003low\030\002 \001(\006*\222\003\n\014MetadataType\022\014\n\010RESERVED\020"
  "\000\022\024\n\020INTERFACE_LEVEL1\020\001\022\017\n\013HOP_LATENCY\020\002"
  "\022\023\n\017QUEUE_OCCUPANCY\020\003\022\025\n\021INGRESS_TIMESTA"
  "MP\020\004\022\024\n\020EGRESS_TIMESTAMP\020\005\022\024\n\020INTERFACE_"
  "LEVEL2\020\006\022\031\n\025EGRESS_TX_UTILIZATION\020\007\022\024\n\020B"
  "UFFER_OCCUPANCY\020\010\022\025\n\021QUEUE_DROP_REASON\020\017"
  "\022\030\n\024INGRESS_RX_PKT_COUNT\020\020\022\024\n\020INGRESS_RX"
  "_BYTES\020\021\022\031\n\025INGRESS_RX_DROP_COUNT\020\022\022\027\n\023E"
  "GRESS_TX_PKT_COUNT\020\023\022\023\n\017EGRESS_TX_BYTES\020"
  "\024\022\030\n\024EGRESS_TX_DROP_COUNT\020\025\022\032\n\026INGRESS_R"
  "X_UTILIZATION\020\026B7Z5github.com/lschulz/p4"
  "-examples/telemetry/kafka/reportb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_report_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_report_2eproto = {
  false, false, 1240, descriptor_table_protodef_report_2eproto, "report.proto", 
  &descriptor_table_report_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_report_2eproto::offsets,
  file_level_metadata_report_2eproto, file_level_enum_descriptors_report_2eproto, file_level_service_descriptors_report_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_report_2eproto_getter() {
  return &descriptor_table_report_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_report_2eproto(&descriptor_table_report_2eproto);
namespace telemetry {
namespace report {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Report_PacketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_report_2eproto);
  return file_level_enum_descriptors_report_2eproto[0];
}
bool Report_PacketType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Report_PacketType Report::None;
constexpr Report_PacketType Report::Ethernet;
constexpr Report_PacketType Report::IPv4;
constexpr Report_PacketType Report::IPv6;
constexpr Report_PacketType Report::SCION;
constexpr Report_PacketType Report::PacketType_MIN;
constexpr Report_PacketType Report::PacketType_MAX;
constexpr int Report::PacketType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowKey_Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_report_2eproto);
  return file_level_enum_descriptors_report_2eproto[1];
}
bool FlowKey_Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FlowKey_Protocol FlowKey::None;
constexpr FlowKey_Protocol FlowKey::UDP;
constexpr FlowKey_Protocol FlowKey::TCP;
constexpr FlowKey_Protocol FlowKey::Protocol_MIN;
constexpr FlowKey_Protocol FlowKey::Protocol_MAX;
constexpr int FlowKey::Protocol_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetadataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_report_2eproto);
  return file_level_enum_descriptors_report_2eproto[2];
}
bool MetadataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Report::_Internal {
 public:
};

Report::Report(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hops_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:telemetry.report.Report)
}
Report::Report(const Report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hops_(from.hops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  truncated_packet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_truncated_packet().empty()) {
    truncated_packet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_truncated_packet(), 
      GetArenaForAllocation());
  }
  packet_type_ = from.packet_type_;
  // @@protoc_insertion_point(copy_constructor:telemetry.report.Report)
}

void Report::SharedCtor() {
truncated_packet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
packet_type_ = 0;
}

Report::~Report() {
  // @@protoc_insertion_point(destructor:telemetry.report.Report)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Report::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  truncated_packet_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Report::ArenaDtor(void* object) {
  Report* _this = reinterpret_cast< Report* >(object);
  (void)_this;
}
void Report::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Report::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.report.Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hops_.Clear();
  truncated_packet_.ClearToEmpty();
  packet_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .telemetry.report.Hop hops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .telemetry.report.Report.PacketType packet_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_packet_type(static_cast<::telemetry::report::Report_PacketType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes truncated_packet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_truncated_packet();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Report::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.report.Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .telemetry.report.Hop hops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hops(i), target, stream);
  }

  // .telemetry.report.Report.PacketType packet_type = 2;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_packet_type(), target);
  }

  // bytes truncated_packet = 3;
  if (!this->_internal_truncated_packet().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_truncated_packet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.report.Report)
  return target;
}

size_t Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.report.Report)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .telemetry.report.Hop hops = 1;
  total_size += 1UL * this->_internal_hops_size();
  for (const auto& msg : this->hops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes truncated_packet = 3;
  if (!this->_internal_truncated_packet().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_truncated_packet());
  }

  // .telemetry.report.Report.PacketType packet_type = 2;
  if (this->_internal_packet_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packet_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Report::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Report::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Report::GetClassData() const { return &_class_data_; }

void Report::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Report *>(to)->MergeFrom(
      static_cast<const Report &>(from));
}


void Report::MergeFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.report.Report)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hops_.MergeFrom(from.hops_);
  if (!from._internal_truncated_packet().empty()) {
    _internal_set_truncated_packet(from._internal_truncated_packet());
  }
  if (from._internal_packet_type() != 0) {
    _internal_set_packet_type(from._internal_packet_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Report::CopyFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.report.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report::IsInitialized() const {
  return true;
}

void Report::InternalSwap(Report* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hops_.InternalSwap(&other->hops_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &truncated_packet_, lhs_arena,
      &other->truncated_packet_, rhs_arena
  );
  swap(packet_type_, other->packet_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Report::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_report_2eproto_getter, &descriptor_table_report_2eproto_once,
      file_level_metadata_report_2eproto[0]);
}

// ===================================================================

Hop_MetadataEntry_DoNotUse::Hop_MetadataEntry_DoNotUse() {}
Hop_MetadataEntry_DoNotUse::Hop_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Hop_MetadataEntry_DoNotUse::MergeFrom(const Hop_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Hop_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_report_2eproto_getter, &descriptor_table_report_2eproto_once,
      file_level_metadata_report_2eproto[1]);
}

// ===================================================================

class Hop::_Internal {
 public:
};

Hop::Hop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metadata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:telemetry.report.Hop)
}
Hop::Hop(const Hop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(node_id_));
  // @@protoc_insertion_point(copy_constructor:telemetry.report.Hop)
}

void Hop::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&asn_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(node_id_));
}

Hop::~Hop() {
  // @@protoc_insertion_point(destructor:telemetry.report.Hop)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Hop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Hop::ArenaDtor(void* object) {
  Hop* _this = reinterpret_cast< Hop* >(object);
  (void)_this;
  _this->metadata_. ~MapField();
}
inline void Hop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Hop::ArenaDtor);
  }
}
void Hop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Hop::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.report.Hop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(node_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, bytes> metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.report.Hop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 asn = 1;
  if (this->_internal_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_asn(), target);
  }

  // uint32 node_id = 2;
  if (this->_internal_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_node_id(), target);
  }

  // map<uint32, bytes> metadata = 3;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Hop_MetadataEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = Hop_MetadataEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.report.Hop)
  return target;
}

size_t Hop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.report.Hop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, bytes> metadata = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += Hop_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 asn = 1;
  if (this->_internal_asn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_asn());
  }

  // uint32 node_id = 2;
  if (this->_internal_node_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_node_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Hop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Hop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Hop::GetClassData() const { return &_class_data_; }

void Hop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Hop *>(to)->MergeFrom(
      static_cast<const Hop &>(from));
}


void Hop::MergeFrom(const Hop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.report.Hop)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from._internal_asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from._internal_node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Hop::CopyFrom(const Hop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.report.Hop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hop::IsInitialized() const {
  return true;
}

void Hop::InternalSwap(Hop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hop, node_id_)
      + sizeof(Hop::node_id_)
      - PROTOBUF_FIELD_OFFSET(Hop, asn_)>(
          reinterpret_cast<char*>(&asn_),
          reinterpret_cast<char*>(&other->asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Hop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_report_2eproto_getter, &descriptor_table_report_2eproto_once,
      file_level_metadata_report_2eproto[2]);
}

// ===================================================================

class FlowKey::_Internal {
 public:
  static const ::telemetry::report::IPv6Address& dst_ipv6(const FlowKey* msg);
  static const ::telemetry::report::IPv6Address& src_ipv6(const FlowKey* msg);
};

const ::telemetry::report::IPv6Address&
FlowKey::_Internal::dst_ipv6(const FlowKey* msg) {
  return *msg->dst_ip_.dst_ipv6_;
}
const ::telemetry::report::IPv6Address&
FlowKey::_Internal::src_ipv6(const FlowKey* msg) {
  return *msg->src_ip_.src_ipv6_;
}
void FlowKey::set_allocated_dst_ipv6(::telemetry::report::IPv6Address* dst_ipv6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_dst_ip();
  if (dst_ipv6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::telemetry::report::IPv6Address>::GetOwningArena(dst_ipv6);
    if (message_arena != submessage_arena) {
      dst_ipv6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_ipv6, submessage_arena);
    }
    set_has_dst_ipv6();
    dst_ip_.dst_ipv6_ = dst_ipv6;
  }
  // @@protoc_insertion_point(field_set_allocated:telemetry.report.FlowKey.dst_ipv6)
}
void FlowKey::set_allocated_src_ipv6(::telemetry::report::IPv6Address* src_ipv6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_src_ip();
  if (src_ipv6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::telemetry::report::IPv6Address>::GetOwningArena(src_ipv6);
    if (message_arena != submessage_arena) {
      src_ipv6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_ipv6, submessage_arena);
    }
    set_has_src_ipv6();
    src_ip_.src_ipv6_ = src_ipv6;
  }
  // @@protoc_insertion_point(field_set_allocated:telemetry.report.FlowKey.src_ipv6)
}
FlowKey::FlowKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:telemetry.report.FlowKey)
}
FlowKey::FlowKey(const FlowKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dst_as_, &from.dst_as_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&dst_as_)) + sizeof(protocol_));
  clear_has_dst_ip();
  switch (from.dst_ip_case()) {
    case kDstIpv4: {
      _internal_set_dst_ipv4(from._internal_dst_ipv4());
      break;
    }
    case kDstIpv6: {
      _internal_mutable_dst_ipv6()->::telemetry::report::IPv6Address::MergeFrom(from._internal_dst_ipv6());
      break;
    }
    case DST_IP_NOT_SET: {
      break;
    }
  }
  clear_has_src_ip();
  switch (from.src_ip_case()) {
    case kSrcIpv4: {
      _internal_set_src_ipv4(from._internal_src_ipv4());
      break;
    }
    case kSrcIpv6: {
      _internal_mutable_src_ipv6()->::telemetry::report::IPv6Address::MergeFrom(from._internal_src_ipv6());
      break;
    }
    case SRC_IP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:telemetry.report.FlowKey)
}

void FlowKey::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dst_as_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&dst_as_)) + sizeof(protocol_));
clear_has_dst_ip();
clear_has_src_ip();
}

FlowKey::~FlowKey() {
  // @@protoc_insertion_point(destructor:telemetry.report.FlowKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlowKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_dst_ip()) {
    clear_dst_ip();
  }
  if (has_src_ip()) {
    clear_src_ip();
  }
}

void FlowKey::ArenaDtor(void* object) {
  FlowKey* _this = reinterpret_cast< FlowKey* >(object);
  (void)_this;
}
void FlowKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlowKey::clear_dst_ip() {
// @@protoc_insertion_point(one_of_clear_start:telemetry.report.FlowKey)
  switch (dst_ip_case()) {
    case kDstIpv4: {
      // No need to clear
      break;
    }
    case kDstIpv6: {
      if (GetArenaForAllocation() == nullptr) {
        delete dst_ip_.dst_ipv6_;
      }
      break;
    }
    case DST_IP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DST_IP_NOT_SET;
}

void FlowKey::clear_src_ip() {
// @@protoc_insertion_point(one_of_clear_start:telemetry.report.FlowKey)
  switch (src_ip_case()) {
    case kSrcIpv4: {
      // No need to clear
      break;
    }
    case kSrcIpv6: {
      if (GetArenaForAllocation() == nullptr) {
        delete src_ip_.src_ipv6_;
      }
      break;
    }
    case SRC_IP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SRC_IP_NOT_SET;
}


void FlowKey::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.report.FlowKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dst_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_) -
      reinterpret_cast<char*>(&dst_as_)) + sizeof(protocol_));
  clear_dst_ip();
  clear_src_ip();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 dst_as = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dst_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 src_as = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          src_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flow_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flow_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 dst_ipv4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _internal_set_dst_ipv4(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else
          goto handle_unusual;
        continue;
      // .telemetry.report.IPv6Address dst_ipv6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_ipv6(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 src_ipv4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _internal_set_src_ipv4(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else
          goto handle_unusual;
        continue;
      // .telemetry.report.IPv6Address src_ipv6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_ipv6(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dst_port = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          dst_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 src_port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          src_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .telemetry.report.FlowKey.Protocol protocol = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::telemetry::report::FlowKey_Protocol>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.report.FlowKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dst_as = 1;
  if (this->_internal_dst_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dst_as(), target);
  }

  // uint64 src_as = 2;
  if (this->_internal_src_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_src_as(), target);
  }

  // uint32 flow_id = 3;
  if (this->_internal_flow_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flow_id(), target);
  }

  // fixed32 dst_ipv4 = 4;
  if (_internal_has_dst_ipv4()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_dst_ipv4(), target);
  }

  // .telemetry.report.IPv6Address dst_ipv6 = 5;
  if (_internal_has_dst_ipv6()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::dst_ipv6(this), target, stream);
  }

  // fixed32 src_ipv4 = 6;
  if (_internal_has_src_ipv4()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(6, this->_internal_src_ipv4(), target);
  }

  // .telemetry.report.IPv6Address src_ipv6 = 7;
  if (_internal_has_src_ipv6()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::src_ipv6(this), target, stream);
  }

  // uint32 dst_port = 8;
  if (this->_internal_dst_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_dst_port(), target);
  }

  // uint32 src_port = 9;
  if (this->_internal_src_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_src_port(), target);
  }

  // .telemetry.report.FlowKey.Protocol protocol = 10;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.report.FlowKey)
  return target;
}

size_t FlowKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.report.FlowKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 dst_as = 1;
  if (this->_internal_dst_as() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_dst_as());
  }

  // uint64 src_as = 2;
  if (this->_internal_src_as() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_src_as());
  }

  // uint32 flow_id = 3;
  if (this->_internal_flow_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flow_id());
  }

  // uint32 dst_port = 8;
  if (this->_internal_dst_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dst_port());
  }

  // uint32 src_port = 9;
  if (this->_internal_src_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_src_port());
  }

  // .telemetry.report.FlowKey.Protocol protocol = 10;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  switch (dst_ip_case()) {
    // fixed32 dst_ipv4 = 4;
    case kDstIpv4: {
      total_size += 1 + 4;
      break;
    }
    // .telemetry.report.IPv6Address dst_ipv6 = 5;
    case kDstIpv6: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dst_ip_.dst_ipv6_);
      break;
    }
    case DST_IP_NOT_SET: {
      break;
    }
  }
  switch (src_ip_case()) {
    // fixed32 src_ipv4 = 6;
    case kSrcIpv4: {
      total_size += 1 + 4;
      break;
    }
    // .telemetry.report.IPv6Address src_ipv6 = 7;
    case kSrcIpv6: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *src_ip_.src_ipv6_);
      break;
    }
    case SRC_IP_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlowKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowKey::GetClassData() const { return &_class_data_; }

void FlowKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FlowKey *>(to)->MergeFrom(
      static_cast<const FlowKey &>(from));
}


void FlowKey::MergeFrom(const FlowKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.report.FlowKey)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dst_as() != 0) {
    _internal_set_dst_as(from._internal_dst_as());
  }
  if (from._internal_src_as() != 0) {
    _internal_set_src_as(from._internal_src_as());
  }
  if (from._internal_flow_id() != 0) {
    _internal_set_flow_id(from._internal_flow_id());
  }
  if (from._internal_dst_port() != 0) {
    _internal_set_dst_port(from._internal_dst_port());
  }
  if (from._internal_src_port() != 0) {
    _internal_set_src_port(from._internal_src_port());
  }
  if (from._internal_protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  switch (from.dst_ip_case()) {
    case kDstIpv4: {
      _internal_set_dst_ipv4(from._internal_dst_ipv4());
      break;
    }
    case kDstIpv6: {
      _internal_mutable_dst_ipv6()->::telemetry::report::IPv6Address::MergeFrom(from._internal_dst_ipv6());
      break;
    }
    case DST_IP_NOT_SET: {
      break;
    }
  }
  switch (from.src_ip_case()) {
    case kSrcIpv4: {
      _internal_set_src_ipv4(from._internal_src_ipv4());
      break;
    }
    case kSrcIpv6: {
      _internal_mutable_src_ipv6()->::telemetry::report::IPv6Address::MergeFrom(from._internal_src_ipv6());
      break;
    }
    case SRC_IP_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowKey::CopyFrom(const FlowKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.report.FlowKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowKey::IsInitialized() const {
  return true;
}

void FlowKey::InternalSwap(FlowKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowKey, protocol_)
      + sizeof(FlowKey::protocol_)
      - PROTOBUF_FIELD_OFFSET(FlowKey, dst_as_)>(
          reinterpret_cast<char*>(&dst_as_),
          reinterpret_cast<char*>(&other->dst_as_));
  swap(dst_ip_, other->dst_ip_);
  swap(src_ip_, other->src_ip_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_report_2eproto_getter, &descriptor_table_report_2eproto_once,
      file_level_metadata_report_2eproto[3]);
}

// ===================================================================

class IPv6Address::_Internal {
 public:
};

IPv6Address::IPv6Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:telemetry.report.IPv6Address)
}
IPv6Address::IPv6Address(const IPv6Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&high_, &from.high_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_)) + sizeof(low_));
  // @@protoc_insertion_point(copy_constructor:telemetry.report.IPv6Address)
}

void IPv6Address::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&high_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_)) + sizeof(low_));
}

IPv6Address::~IPv6Address() {
  // @@protoc_insertion_point(destructor:telemetry.report.IPv6Address)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IPv6Address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IPv6Address::ArenaDtor(void* object) {
  IPv6Address* _this = reinterpret_cast< IPv6Address* >(object);
  (void)_this;
}
void IPv6Address::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPv6Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPv6Address::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.report.IPv6Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&high_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_) -
      reinterpret_cast<char*>(&high_)) + sizeof(low_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPv6Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 high = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // fixed64 low = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPv6Address::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.report.IPv6Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 high = 1;
  if (this->_internal_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_high(), target);
  }

  // fixed64 low = 2;
  if (this->_internal_low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_low(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.report.IPv6Address)
  return target;
}

size_t IPv6Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.report.IPv6Address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 high = 1;
  if (this->_internal_high() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 low = 2;
  if (this->_internal_low() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPv6Address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IPv6Address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPv6Address::GetClassData() const { return &_class_data_; }

void IPv6Address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IPv6Address *>(to)->MergeFrom(
      static_cast<const IPv6Address &>(from));
}


void IPv6Address::MergeFrom(const IPv6Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.report.IPv6Address)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from._internal_low() != 0) {
    _internal_set_low(from._internal_low());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPv6Address::CopyFrom(const IPv6Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.report.IPv6Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPv6Address::IsInitialized() const {
  return true;
}

void IPv6Address::InternalSwap(IPv6Address* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPv6Address, low_)
      + sizeof(IPv6Address::low_)
      - PROTOBUF_FIELD_OFFSET(IPv6Address, high_)>(
          reinterpret_cast<char*>(&high_),
          reinterpret_cast<char*>(&other->high_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPv6Address::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_report_2eproto_getter, &descriptor_table_report_2eproto_once,
      file_level_metadata_report_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace report
}  // namespace telemetry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::telemetry::report::Report* Arena::CreateMaybeMessage< ::telemetry::report::Report >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::report::Report >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry::report::Hop_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::telemetry::report::Hop_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::report::Hop_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry::report::Hop* Arena::CreateMaybeMessage< ::telemetry::report::Hop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::report::Hop >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry::report::FlowKey* Arena::CreateMaybeMessage< ::telemetry::report::FlowKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::report::FlowKey >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry::report::IPv6Address* Arena::CreateMaybeMessage< ::telemetry::report::IPv6Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::report::IPv6Address >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
