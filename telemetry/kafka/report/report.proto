syntax = "proto3";
package telemetry.report;

option go_package = "github.com/lschulz/p4-examples/telemetry/kafka/report";

// Simplified INT report.
message Report {
    // Stack of recorded metadata. Data from the INT sink comes first, data from the INT source
    // last.
    repeated Hop hops = 1;

    enum PacketType {
        None = 0;
        Ethernet = 1;
        IPv4 = 2;
        IPv6 = 3;
        SCION = 4;
    }

    // Type of the first header of the truncated packet in 'packet'
    PacketType packet_type = 2;

    // Truncated packet headers. The first header is determined by 'packetType'
    bytes truncated_packet = 3;
}

// Metadata types
// Types 0-15 are reserved for standard metadata according to the INT specification.
// Types >=16 are used for domain-specific metadata.
enum MetadataType {
    // Metadata types from the INT v2.1 & Telemetry Report v2.0 Specifications

    // Reserved/Invalid
    RESERVED = 0;
    // Level 1 Ingress Interface ID (2 bytes) + Egress Interface ID (2 bytes)
    INTERFACE_LEVEL1 = 1;
    // Hop (4 bytes)
    HOP_LATENCY = 2;
    // Queue ID (1 byte) + Queue occupancy (3 bytes)
    QUEUE_OCCUPANCY = 3;
    // Ingress timestamp (8 bytes)
    INGRESS_TIMESTAMP = 4;
    // Egress timestamp (8 bytes)
    EGRESS_TIMESTAMP = 5;
    // Level 2 ingress interface ID (4 bytes) + Egress interface ID (4 bytes)
    INTERFACE_LEVEL2 = 6;
    // Egress port TX utilization (4 bytes)
    EGRESS_TX_UTILIZATION = 7;
    // Buffer ID (1 byte) + Buffer occupancy (3 bytes)
    BUFFER_OCCUPANCY = 8;
    // Queue ID (1 byte) + Drop reason (1 byte) + Padding (2 bytes)
    QUEUE_DROP_REASON = 15;

    // Non-standard metadata
    // Length of the metadata values is variable.

    // Total number of packets received on the ingress port since the last reset
    INGRESS_RX_PKT_COUNT = 16;
    // Total number of bytes received on the ingress port since the last reset
    INGRESS_RX_BYTES = 17;
    // Total number of packets dropped on the ingress port
    INGRESS_RX_DROP_COUNT = 18;
    // Total number of packets sent on the egress port since the last reset
    EGRESS_TX_PKT_COUNT = 19;
    // Total number of bytes sent on the egress port since the last reset
    EGRESS_TX_BYTES = 20;
    // Total number of packets dropped on the egress port since the last reset
    EGRESS_TX_DROP_COUNT = 21;
    // Ingress port Rx utilization
    INGRESS_RX_UTILIZATION = 22;
}

// Metadata recorded by an INT node.
message Hop {
    // AS the hop belongs to identified by AS number (48 bits). The ISD number is not included.
    uint64 asn = 1;

    // Node identifier. Identifies the specific switch/border router within an AS that recorded the
    // metadata. The value 0 is reserved.
    uint32 node_id = 2;

    // Mapping from metadata type to value
    // Integer values are stored in big-endian byte order.
    map<uint32, bytes> metadata = 3;
}

// Parameters for identifying flows.
// This message is used as key type for Kafka events. By keying events on flows, reports from the
// same flow go to the same partition and are ordered with respect to other reports from the same
// flow.
// All members are to be considered optional.
message FlowKey {
    // Destination AS (ASN)
    uint64 dst_as = 1;

    // Source AS (ASN)
    uint64 src_as = 2;

    // 20-bit FlowID from the SCION header
    uint32 flow_id = 3;

    // Destination IP
    oneof dst_ip {
        fixed32 dst_ipv4 = 4;
        IPv6Address dst_ipv6 = 5;
    }

    // Source IP
    oneof src_ip {
        fixed32 src_ipv4 = 6;
        IPv6Address src_ipv6 = 7;
    }

    // Destination port
    uint32 dst_port = 8;

    // Source port
    uint32 src_port = 9;

    enum Protocol {
        None = 0;
        UDP = 1;
        TCP = 2;
    }

    // L4 protocol type
    Protocol protocol = 10;
}

// 128-bit IPv6 address
message IPv6Address {
    fixed64 high = 1;
    fixed64 low = 2;
}
