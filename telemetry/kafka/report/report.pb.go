// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: report/report.proto

package report

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Metadata types
// Types 0-15 are reserved for standard metadata according to the INT specification.
// Types >=16 are used for domain-specific metadata.
type MetadataType int32

const (
	// Reserved/Invalid
	MetadataType_RESERVED MetadataType = 0
	// Level 1 Ingress Interface ID (2 bytes) + Egress Interface ID (2 bytes)
	MetadataType_INTERFACE_LEVEL1 MetadataType = 1
	// Hop (4 bytes)
	MetadataType_HOP_LATENCY MetadataType = 2
	// Queue ID (1 byte) + Queue occupancy (3 bytes)
	MetadataType_QUEUE_OCCUPANCY MetadataType = 3
	// Ingress timestamp (8 bytes)
	MetadataType_INGRESS_TIMESTAMP MetadataType = 4
	// Egress timestamp (8 bytes)
	MetadataType_EGRESS_TIMESTAMP MetadataType = 5
	// Level 2 ingress interface ID (4 bytes) + Egress interface ID (4 bytes)
	MetadataType_INTERFACE_LEVEL2 MetadataType = 6
	// Egress port TX utilization (4 bytes)
	MetadataType_EGRESS_TX_UTILIZATION MetadataType = 7
	// Buffer ID (1 byte) + Buffer occupancy (3 bytes)
	MetadataType_BUFFER_OCCUPANCY MetadataType = 8
	// Queue ID (1 byte) + Drop reason (1 byte) + Padding (2 bytes)
	MetadataType_QUEUE_DROP_REASON MetadataType = 15
	// Total number of packets received on the ingress port since the last reset
	MetadataType_INGRESS_RX_PKT_COUNT MetadataType = 16
	// Total number of bytes received on the ingress port since the last reset
	MetadataType_INGRESS_RX_BYTES MetadataType = 17
	// Total number of packets dropped on the ingress port
	MetadataType_INGRESS_RX_DROP_COUNT MetadataType = 18
	// Total number of packets sent on the egress port since the last reset
	MetadataType_EGRESS_TX_PKT_COUNT MetadataType = 19
	// Total number of bytes sent on the egress port since the last reset
	MetadataType_EGRESS_TX_BYTES MetadataType = 20
	// Total number of packets dropped on the egress port since the last reset
	MetadataType_EGRESS_TX_DROP_COUNT MetadataType = 21
	// Ingress port Rx utilization
	MetadataType_INGRESS_RX_UTILIZATION MetadataType = 22
)

// Enum value maps for MetadataType.
var (
	MetadataType_name = map[int32]string{
		0:  "RESERVED",
		1:  "INTERFACE_LEVEL1",
		2:  "HOP_LATENCY",
		3:  "QUEUE_OCCUPANCY",
		4:  "INGRESS_TIMESTAMP",
		5:  "EGRESS_TIMESTAMP",
		6:  "INTERFACE_LEVEL2",
		7:  "EGRESS_TX_UTILIZATION",
		8:  "BUFFER_OCCUPANCY",
		15: "QUEUE_DROP_REASON",
		16: "INGRESS_RX_PKT_COUNT",
		17: "INGRESS_RX_BYTES",
		18: "INGRESS_RX_DROP_COUNT",
		19: "EGRESS_TX_PKT_COUNT",
		20: "EGRESS_TX_BYTES",
		21: "EGRESS_TX_DROP_COUNT",
		22: "INGRESS_RX_UTILIZATION",
	}
	MetadataType_value = map[string]int32{
		"RESERVED":               0,
		"INTERFACE_LEVEL1":       1,
		"HOP_LATENCY":            2,
		"QUEUE_OCCUPANCY":        3,
		"INGRESS_TIMESTAMP":      4,
		"EGRESS_TIMESTAMP":       5,
		"INTERFACE_LEVEL2":       6,
		"EGRESS_TX_UTILIZATION":  7,
		"BUFFER_OCCUPANCY":       8,
		"QUEUE_DROP_REASON":      15,
		"INGRESS_RX_PKT_COUNT":   16,
		"INGRESS_RX_BYTES":       17,
		"INGRESS_RX_DROP_COUNT":  18,
		"EGRESS_TX_PKT_COUNT":    19,
		"EGRESS_TX_BYTES":        20,
		"EGRESS_TX_DROP_COUNT":   21,
		"INGRESS_RX_UTILIZATION": 22,
	}
)

func (x MetadataType) Enum() *MetadataType {
	p := new(MetadataType)
	*p = x
	return p
}

func (x MetadataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetadataType) Descriptor() protoreflect.EnumDescriptor {
	return file_report_report_proto_enumTypes[0].Descriptor()
}

func (MetadataType) Type() protoreflect.EnumType {
	return &file_report_report_proto_enumTypes[0]
}

func (x MetadataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetadataType.Descriptor instead.
func (MetadataType) EnumDescriptor() ([]byte, []int) {
	return file_report_report_proto_rawDescGZIP(), []int{0}
}

type Report_PacketType int32

const (
	Report_None     Report_PacketType = 0
	Report_Ethernet Report_PacketType = 1
	Report_IPv4     Report_PacketType = 2
	Report_IPv6     Report_PacketType = 3
	Report_SCION    Report_PacketType = 4
)

// Enum value maps for Report_PacketType.
var (
	Report_PacketType_name = map[int32]string{
		0: "None",
		1: "Ethernet",
		2: "IPv4",
		3: "IPv6",
		4: "SCION",
	}
	Report_PacketType_value = map[string]int32{
		"None":     0,
		"Ethernet": 1,
		"IPv4":     2,
		"IPv6":     3,
		"SCION":    4,
	}
)

func (x Report_PacketType) Enum() *Report_PacketType {
	p := new(Report_PacketType)
	*p = x
	return p
}

func (x Report_PacketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_PacketType) Descriptor() protoreflect.EnumDescriptor {
	return file_report_report_proto_enumTypes[1].Descriptor()
}

func (Report_PacketType) Type() protoreflect.EnumType {
	return &file_report_report_proto_enumTypes[1]
}

func (x Report_PacketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_PacketType.Descriptor instead.
func (Report_PacketType) EnumDescriptor() ([]byte, []int) {
	return file_report_report_proto_rawDescGZIP(), []int{0, 0}
}

type FlowKey_Protocol int32

const (
	FlowKey_None FlowKey_Protocol = 0
	FlowKey_UDP  FlowKey_Protocol = 1
	FlowKey_TCP  FlowKey_Protocol = 2
)

// Enum value maps for FlowKey_Protocol.
var (
	FlowKey_Protocol_name = map[int32]string{
		0: "None",
		1: "UDP",
		2: "TCP",
	}
	FlowKey_Protocol_value = map[string]int32{
		"None": 0,
		"UDP":  1,
		"TCP":  2,
	}
)

func (x FlowKey_Protocol) Enum() *FlowKey_Protocol {
	p := new(FlowKey_Protocol)
	*p = x
	return p
}

func (x FlowKey_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowKey_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_report_report_proto_enumTypes[2].Descriptor()
}

func (FlowKey_Protocol) Type() protoreflect.EnumType {
	return &file_report_report_proto_enumTypes[2]
}

func (x FlowKey_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowKey_Protocol.Descriptor instead.
func (FlowKey_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_report_report_proto_rawDescGZIP(), []int{2, 0}
}

// Simplified INT report.
type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stack of recorded metadata. Data from the INT sink comes first, data from the INT source
	// last.
	Hops []*Hop `protobuf:"bytes,1,rep,name=hops,proto3" json:"hops,omitempty"`
	// Type of the first header of the truncated packet in 'packet'
	PacketType Report_PacketType `protobuf:"varint,2,opt,name=packet_type,json=packetType,proto3,enum=telemetry.report.Report_PacketType" json:"packet_type,omitempty"`
	// Truncated packet headers. The first header is determined by 'packetType'
	TruncatedPacket []byte `protobuf:"bytes,3,opt,name=truncated_packet,json=truncatedPacket,proto3" json:"truncated_packet,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_report_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_report_report_proto_rawDescGZIP(), []int{0}
}

func (x *Report) GetHops() []*Hop {
	if x != nil {
		return x.Hops
	}
	return nil
}

func (x *Report) GetPacketType() Report_PacketType {
	if x != nil {
		return x.PacketType
	}
	return Report_None
}

func (x *Report) GetTruncatedPacket() []byte {
	if x != nil {
		return x.TruncatedPacket
	}
	return nil
}

// Metadata recorded by an INT node.
type Hop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AS the hop belongs to identified by AS number (48 bits). The ISD number is not included.
	Asn uint64 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	// Node identifier. Identifies the specific switch/border router within an AS that recorded the
	// metadata. The value 0 is reserved.
	NodeId uint32 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Mapping from metadata type to value
	// Integer values are stored in big-endian byte order.
	Metadata map[uint32][]byte `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Hop) Reset() {
	*x = Hop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hop) ProtoMessage() {}

func (x *Hop) ProtoReflect() protoreflect.Message {
	mi := &file_report_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hop.ProtoReflect.Descriptor instead.
func (*Hop) Descriptor() ([]byte, []int) {
	return file_report_report_proto_rawDescGZIP(), []int{1}
}

func (x *Hop) GetAsn() uint64 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *Hop) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Hop) GetMetadata() map[uint32][]byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Parameters for identifying flows.
// This message is used as key type for Kafka events. By keying events on flows, reports from the
// same flow go to the same partition and are ordered with respect to other reports from the same
// flow.
// All members are to be considered optional.
type FlowKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination AS (ASN)
	DstAs uint64 `protobuf:"varint,1,opt,name=dst_as,json=dstAs,proto3" json:"dst_as,omitempty"`
	// Source AS (ASN)
	SrcAs uint64 `protobuf:"varint,2,opt,name=src_as,json=srcAs,proto3" json:"src_as,omitempty"`
	// 20-bit FlowID from the SCION header
	FlowId uint32 `protobuf:"varint,3,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	// Destination IP
	//
	// Types that are assignable to DstIp:
	//	*FlowKey_DstIpv4
	//	*FlowKey_DstIpv6
	DstIp isFlowKey_DstIp `protobuf_oneof:"dst_ip"`
	// Source IP
	//
	// Types that are assignable to SrcIp:
	//	*FlowKey_SrcIpv4
	//	*FlowKey_SrcIpv6
	SrcIp isFlowKey_SrcIp `protobuf_oneof:"src_ip"`
	// Destination port
	DstPort uint32 `protobuf:"varint,8,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	// Source port
	SrcPort uint32 `protobuf:"varint,9,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	// L4 protocol type
	Protocol FlowKey_Protocol `protobuf:"varint,10,opt,name=protocol,proto3,enum=telemetry.report.FlowKey_Protocol" json:"protocol,omitempty"`
}

func (x *FlowKey) Reset() {
	*x = FlowKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowKey) ProtoMessage() {}

func (x *FlowKey) ProtoReflect() protoreflect.Message {
	mi := &file_report_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowKey.ProtoReflect.Descriptor instead.
func (*FlowKey) Descriptor() ([]byte, []int) {
	return file_report_report_proto_rawDescGZIP(), []int{2}
}

func (x *FlowKey) GetDstAs() uint64 {
	if x != nil {
		return x.DstAs
	}
	return 0
}

func (x *FlowKey) GetSrcAs() uint64 {
	if x != nil {
		return x.SrcAs
	}
	return 0
}

func (x *FlowKey) GetFlowId() uint32 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (m *FlowKey) GetDstIp() isFlowKey_DstIp {
	if m != nil {
		return m.DstIp
	}
	return nil
}

func (x *FlowKey) GetDstIpv4() uint32 {
	if x, ok := x.GetDstIp().(*FlowKey_DstIpv4); ok {
		return x.DstIpv4
	}
	return 0
}

func (x *FlowKey) GetDstIpv6() *IPv6Address {
	if x, ok := x.GetDstIp().(*FlowKey_DstIpv6); ok {
		return x.DstIpv6
	}
	return nil
}

func (m *FlowKey) GetSrcIp() isFlowKey_SrcIp {
	if m != nil {
		return m.SrcIp
	}
	return nil
}

func (x *FlowKey) GetSrcIpv4() uint32 {
	if x, ok := x.GetSrcIp().(*FlowKey_SrcIpv4); ok {
		return x.SrcIpv4
	}
	return 0
}

func (x *FlowKey) GetSrcIpv6() *IPv6Address {
	if x, ok := x.GetSrcIp().(*FlowKey_SrcIpv6); ok {
		return x.SrcIpv6
	}
	return nil
}

func (x *FlowKey) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *FlowKey) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *FlowKey) GetProtocol() FlowKey_Protocol {
	if x != nil {
		return x.Protocol
	}
	return FlowKey_None
}

type isFlowKey_DstIp interface {
	isFlowKey_DstIp()
}

type FlowKey_DstIpv4 struct {
	DstIpv4 uint32 `protobuf:"fixed32,4,opt,name=dst_ipv4,json=dstIpv4,proto3,oneof"`
}

type FlowKey_DstIpv6 struct {
	DstIpv6 *IPv6Address `protobuf:"bytes,5,opt,name=dst_ipv6,json=dstIpv6,proto3,oneof"`
}

func (*FlowKey_DstIpv4) isFlowKey_DstIp() {}

func (*FlowKey_DstIpv6) isFlowKey_DstIp() {}

type isFlowKey_SrcIp interface {
	isFlowKey_SrcIp()
}

type FlowKey_SrcIpv4 struct {
	SrcIpv4 uint32 `protobuf:"fixed32,6,opt,name=src_ipv4,json=srcIpv4,proto3,oneof"`
}

type FlowKey_SrcIpv6 struct {
	SrcIpv6 *IPv6Address `protobuf:"bytes,7,opt,name=src_ipv6,json=srcIpv6,proto3,oneof"`
}

func (*FlowKey_SrcIpv4) isFlowKey_SrcIp() {}

func (*FlowKey_SrcIpv6) isFlowKey_SrcIp() {}

// 128-bit IPv6 address
type IPv6Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	High uint64 `protobuf:"fixed64,1,opt,name=high,proto3" json:"high,omitempty"`
	Low  uint64 `protobuf:"fixed64,2,opt,name=low,proto3" json:"low,omitempty"`
}

func (x *IPv6Address) Reset() {
	*x = IPv6Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv6Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv6Address) ProtoMessage() {}

func (x *IPv6Address) ProtoReflect() protoreflect.Message {
	mi := &file_report_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv6Address.ProtoReflect.Descriptor instead.
func (*IPv6Address) Descriptor() ([]byte, []int) {
	return file_report_report_proto_rawDescGZIP(), []int{3}
}

func (x *IPv6Address) GetHigh() uint64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *IPv6Address) GetLow() uint64 {
	if x != nil {
		return x.Low
	}
	return 0
}

var File_report_report_proto protoreflect.FileDescriptor

var file_report_report_proto_rawDesc = []byte{
	0x0a, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x48, 0x6f, 0x70, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x44, 0x0a,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x74,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x43,
	0x0a, 0x0a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x50, 0x76, 0x36, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x43, 0x49, 0x4f,
	0x4e, 0x10, 0x04, 0x22, 0xae, 0x01, 0x0a, 0x03, 0x48, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x48, 0x6f, 0x70, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x03, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x77, 0x4b, 0x65, 0x79,
	0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x64, 0x73, 0x74, 0x41, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x72, 0x63, 0x41, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x48, 0x00, 0x52, 0x07, 0x64, 0x73, 0x74,
	0x49, 0x70, 0x76, 0x34, 0x12, 0x3a, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x64, 0x73, 0x74, 0x49, 0x70, 0x76, 0x36,
	0x12, 0x1b, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x07, 0x48, 0x01, 0x52, 0x07, 0x73, 0x72, 0x63, 0x49, 0x70, 0x76, 0x34, 0x12, 0x3a, 0x0a,
	0x08, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x01,
	0x52, 0x07, 0x73, 0x72, 0x63, 0x49, 0x70, 0x76, 0x36, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x3e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4b, 0x65, 0x79, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22,
	0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x22, 0x33, 0x0a, 0x0b, 0x49,
	0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6c, 0x6f, 0x77,
	0x2a, 0x92, 0x03, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x31, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x4f, 0x50, 0x5f, 0x4c, 0x41, 0x54,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f,
	0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x32, 0x10, 0x06, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x55, 0x54, 0x49, 0x4c,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x55, 0x46,
	0x46, 0x45, 0x52, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x10, 0x08, 0x12,
	0x15, 0x0a, 0x11, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x10,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x58, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x12, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x50,
	0x4b, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x14, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x55, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x16, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x73, 0x63, 0x68, 0x75, 0x6c, 0x7a, 0x2f, 0x70, 0x34, 0x2d, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_report_report_proto_rawDescOnce sync.Once
	file_report_report_proto_rawDescData = file_report_report_proto_rawDesc
)

func file_report_report_proto_rawDescGZIP() []byte {
	file_report_report_proto_rawDescOnce.Do(func() {
		file_report_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_report_report_proto_rawDescData)
	})
	return file_report_report_proto_rawDescData
}

var file_report_report_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_report_report_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_report_report_proto_goTypes = []interface{}{
	(MetadataType)(0),      // 0: telemetry.report.MetadataType
	(Report_PacketType)(0), // 1: telemetry.report.Report.PacketType
	(FlowKey_Protocol)(0),  // 2: telemetry.report.FlowKey.Protocol
	(*Report)(nil),         // 3: telemetry.report.Report
	(*Hop)(nil),            // 4: telemetry.report.Hop
	(*FlowKey)(nil),        // 5: telemetry.report.FlowKey
	(*IPv6Address)(nil),    // 6: telemetry.report.IPv6Address
	nil,                    // 7: telemetry.report.Hop.MetadataEntry
}
var file_report_report_proto_depIdxs = []int32{
	4, // 0: telemetry.report.Report.hops:type_name -> telemetry.report.Hop
	1, // 1: telemetry.report.Report.packet_type:type_name -> telemetry.report.Report.PacketType
	7, // 2: telemetry.report.Hop.metadata:type_name -> telemetry.report.Hop.MetadataEntry
	6, // 3: telemetry.report.FlowKey.dst_ipv6:type_name -> telemetry.report.IPv6Address
	6, // 4: telemetry.report.FlowKey.src_ipv6:type_name -> telemetry.report.IPv6Address
	2, // 5: telemetry.report.FlowKey.protocol:type_name -> telemetry.report.FlowKey.Protocol
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_report_report_proto_init() }
func file_report_report_proto_init() {
	if File_report_report_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_report_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv6Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_report_report_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*FlowKey_DstIpv4)(nil),
		(*FlowKey_DstIpv6)(nil),
		(*FlowKey_SrcIpv4)(nil),
		(*FlowKey_SrcIpv6)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_report_report_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_report_report_proto_goTypes,
		DependencyIndexes: file_report_report_proto_depIdxs,
		EnumInfos:         file_report_report_proto_enumTypes,
		MessageInfos:      file_report_report_proto_msgTypes,
	}.Build()
	File_report_report_proto = out.File
	file_report_report_proto_rawDesc = nil
	file_report_report_proto_goTypes = nil
	file_report_report_proto_depIdxs = nil
}
